?plotmath
?text
par(mar = c(9, 5, 4, 1))
plot(x, y, col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
mtext(text = expression( cos(theta) == frac(e^{i * theta} + e^{-i * theta}, 2)  ), side = 1, line = 7)
#Exercise 4
?par()
par(mar = c(9, 9, 9, 9), mfrow = c(3, 2))
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
plot(x, sin(x), col = "red2", type = "l",
xlab = expression(gamma),
ylab = expression(sin(gamma)),
main = "a graph of the sine function")
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
plot(x, sin(x), col = "red2", type = "l",
xlab = expression(gamma),
ylab = expression(sin(gamma)),
main = "a graph of the sine function")
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
plot(x, sin(x), col = "red2", type = "l",
xlab = expression(gamma),
ylab = expression(sin(gamma)),
main = "a graph of the sine function")
par(mar = c(5, 5, 5, 1), mfrow = c(3, 2))
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
plot(x, sin(x), col = "red2", type = "l",
xlab = expression(gamma),
ylab = expression(sin(gamma)),
main = "a graph of the sine function")
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
plot(x, sin(x), col = "red2", type = "l",
xlab = expression(gamma),
ylab = expression(sin(gamma)),
main = "a graph of the sine function")
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
plot(x, sin(x), col = "red2", type = "l",
xlab = expression(gamma),
ylab = expression(sin(gamma)),
main = "a graph of the sine function")
par(mar = c(9, 9, 9, 1))
plot(x, y, col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
mtext(text = expression( cos(theta) == frac(e^{i * theta} + e^{-i * theta}, 2)  ), side = 1, line = 7)
par(mar = c(9, 5, 4, 1))
plot(x, y, col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
mtext(text = expression( cos(theta) == frac(e^{i * theta} + e^{-i * theta}, 2)  ), side = 1, line = 7)
par(mar = c(9, 5, 4, 1))
plot(x, y, col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
par(mar = c(9, 5, 4, 1))
plot(x, y, col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
mtext(text = expression( cos(theta) == frac(e^{i * theta} + e^{-i * theta}, 2)  ), side = 1, line = 7)
par(mar = c(9, 9, 9, 1))
plot(x, y, col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
mtext(text = expression( cos(theta) == frac(e^{i * theta} + e^{-i * theta}, 2)  ), side = 1, line = 7)
par(mar = c(5, 5, 5, 1), mfrow = c(3, 2))
par(mar = c(9, 9, 9, 1), mfrow = c(3, 2))
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
plot(x, sin(x), col = "red2", type = "l",
xlab = expression(gamma),
ylab = expression(sin(gamma)),
main = "a graph of the sine function")
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
plot(x, sin(x), col = "red2", type = "l",
xlab = expression(gamma),
ylab = expression(sin(gamma)),
main = "a graph of the sine function")
par(mar = c(9, 5, 5, 1), mfrow = c(3, 2))
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
plot(x, sin(x), col = "red2", type = "l",
xlab = expression(gamma),
ylab = expression(sin(gamma)),
main = "a graph of the sine function")
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
par(mar = c(9, 9, 9, 1))
plot(x, y, col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
mtext(text = expression( cos(theta) == frac(e^{i * theta} + e^{-i * theta}, 2)  ), side = 1, line = 7)
par(mar = c(5, 5, 5, 1), mfrow = c(3, 2))
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
plot(x, sin(x), col = "red2", type = "l",
xlab = expression(gamma),
ylab = expression(sin(gamma)),
main = "a graph of the sine function")
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
plot(x, sin(x), col = "red2", type = "l",
xlab = expression(gamma),
ylab = expression(sin(gamma)),
main = "a graph of the sine function")
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = expression(cos(theta)),
main = "a graph of the cosine function")
plot(x, sin(x), col = "red2", type = "l",
xlab = expression(gamma),
ylab = expression(sin(gamma)),
main = "a graph of the sine function")
par(mar = c(5, 3, 5, 1), mfrow = c(1, 1))
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = " ",
main = "a graph of the sine and cosine functions")
lines(x, sin(x), col = "red2")
plot(x, cos(x), col = "green4", type = "l",
xlab = expression(theta),
ylab = " ",
main = "a graph of the sine and cosine functions")
lines(x, sin(x), col = "red2", lty = 2)
legend(x = "topright",
legend = c(expression(cos(theta)), expression(sin(theta))),
lty = c(1, 2),
col = c("green4", "red2"),
horiz = TRUE)
?legend
setwd(F:\LEEDS\Minerva\MATH5741M Statistical Theory and Methods\Coursework)
setwd(F:/LEEDS\Minerva\MATH5741M Statistical Theory and Methods\Coursework)
setwd(F:/LEEDS/Minerva/MATH5741M Statistical Theory and Methods/Coursework)
setwd(F:/LEEDS/Minerva/MATH5741M Statistical Theory and Methods/Coursework)
p <- 0.25
n <- 50
x <- 0:n
plot(x, f(x, n, p))
return( (p^x)*((1-p)^(n-x))*factorial(n)/(factorial(x)*factorial(n-x)))
f = function(x, n, p){
return( (p^x)*((1-p)^(n-x))*factorial(n)/(factorial(x)*factorial(n-x)))
}
n <- 50
p <- 0.25
x <- 0:n
plot(x, f(x, n, p), pch = 16)
plot(x, f(x, n, p), pch = 16)
points(x, f(x, n, p = 0.5), col = "blue", pch = 16)
points(x, f(x, n, p = 0.75), col = "red3", pch = 16)
p <- 0.4
n <- 100
plot(0:n, f(0:n, n , p), pch = 16, ylim = c(0, 0.18))
n <- 50
points(0:n, f(0:n, n , p), col = "blue", pch = 16)
n <- 25
points(0:n, f(0:n, n , p), col = "red3", pch = 16)
F <- function(x, n, p){ return(sum(f(0:x, n, p)) )}
p <- 0.25
n <- 10
for(x in 0:10){
print(paste("(", F(x, n, p), ", ", pbinom(x, size = n, prob = p), ")", sep = ""))
}
for(x in 0:10){
print(paste("(", f(x, n, p), ", ", dbinom(x, size = n, prob = p), ")", sep = ""))
}
n*p
x <- 0:10
p <- 0.25
n <- 10
sum(f(x, n, p))
E <- sum(x*f(x, n, p))
E
probs <- f(0:x, n, p)
cumprob <- sum(probs)
return(cumprob)
F <- function(x, n, p){
probs <- f(0:x, n, p)
cumprob <- sum(probs)
return(cumprob)
}
lambda <- 2.5
x <- rexp(n = 100, rate = lambda)    # A sample of size n = 100.
mean(x)
1/lambda
knitr::opts_chunk$set(echo = TRUE)
getwd()
filename <- "Coursera_DS3_Final.zip"
# Checking if archieve already exists.
if (!file.exists(filename)){
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, filename, method="curl")
}
# Checking if folder exists
if (!file.exists("UCI HAR Dataset")) {
unzip(filename)
}
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$functions)
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$functions)
X <- rbind(x_train, x_test)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "code")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "code")
y <- rbind(y_train, y_test)
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
Subject <- rbind(subject_train, subject_test)
Merge_Data <- cbind(subject,X,y)
Merge_Data <- cbind(Subject,X,y)
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = "Values")
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = "Value")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = "Value")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", header=FALSE)
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", header=FALSE)
X <- rbind(x_train, x_test)
Merge_Data <- cbind(Subject,X,y)
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = "features")
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = "features"E)
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = "features")
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = "features")
X <- rbind(x_train, x_test)
Merge_Data <- cbind(Subject,X,y)
colcontainsmeanstd <- grep(".*Mean.*|.*Std.*", names(completeData), ignore.case=TRUE)
colcontainsmeanstd <- grep(".*Mean.*|.*Std.*", names(Merge_Data), ignore.case=TRUE)
colcontainsmeanstd
Merge_Data <- cbind(Subject,X,y)
TidyData <- Merged_Data %>% select(subject, code, contains("mean"), contains("std"))
TidyData$code <- activities[TidyData$code, 2]
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
TidyData$code <- activities[TidyData$code, 2]
names(TidyData)[2] = "activity"
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
TidyData <- Merged_Data %>% select(subject, code, contains("mean"), contains("std"))
TidyData$code <- activities[TidyData$code, 2]
library(dplyr)
Merge_Data <- cbind(Subject,X,y)
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
TidyData <- Merged_Data %>% select(subject, code, contains("mean"), contains("std"))
TidyData <- Merge_Data %>% select(subject, code, contains("mean"), contains("std"))
TidyData$code <- activities[TidyData$code, 2]
names(TidyData)[2] = "activity"
names(TidyData)<-gsub("Acc", "Accelerometer", names(TidyData))
names(TidyData)<-gsub("Gyro", "Gyroscope", names(TidyData))
names(TidyData)<-gsub("BodyBody", "Body", names(TidyData))
names(TidyData)<-gsub("Mag", "Magnitude", names(TidyData))
names(TidyData)<-gsub("^t", "Time", names(TidyData))
names(TidyData)<-gsub("^f", "Frequency", names(TidyData))
names(TidyData)<-gsub("tBody", "TimeBody", names(TidyData))
names(TidyData)<-gsub("-mean()", "Mean", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("-std()", "STD", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("-freq()", "Frequency", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("angle", "Angle", names(TidyData))
names(TidyData)<-gsub("gravity", "Gravity", names(TidyData))
FinalData <- TidyData %>%
group_by(subject, activity) %>%
summarise_all(funs(mean))
write.table(FinalData, "FinalData.txt", row.name=FALSE)
str(FinalData)
FinalData
TidyData$code <- activities[TidyData$code, 2]
Merge_Data <- cbind(Subject,X,y)
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
TidyData <- Merge_Data %>% select(subject, code, contains("mean"), contains("std"))
TidyData$code <- activities[TidyData$code, 2]
names(TidyData)[2] = "activity"
View(TidyData)
names(TidyData)<-gsub("Acc", "Accelerometer", names(TidyData))
t
TidyData <- Merge_Data %>% select(subject, code, contains("mean"), contains("std"))
View(TidyData)
features <- read.table("UCI HAR Dataset/features.txt", col.names = c("n","functions"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$functions)
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "code")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$functions)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "code")
X <- rbind(x_train, x_test)
Y <- rbind(y_train, y_test)
Subject <- rbind(subject_train, subject_test)
Merged_Data <- cbind(Subject, Y, X)
TidyData <- Merged_Data %>% select(subject, code, contains("mean"), contains("std"))
TidyData$code <- activities[TidyData$code, 2]
names(TidyData)[2] = "activity"
names(TidyData)<-gsub("Acc", "Accelerometer", names(TidyData))
names(TidyData)<-gsub("Gyro", "Gyroscope", names(TidyData))
names(TidyData)<-gsub("BodyBody", "Body", names(TidyData))
names(TidyData)<-gsub("Mag", "Magnitude", names(TidyData))
names(TidyData)<-gsub("^t", "Time", names(TidyData))
names(TidyData)<-gsub("^f", "Frequency", names(TidyData))
names(TidyData)<-gsub("tBody", "TimeBody", names(TidyData))
names(TidyData)<-gsub("-mean()", "Mean", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("-std()", "STD", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("-freq()", "Frequency", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("angle", "Angle", names(TidyData))
names(TidyData)<-gsub("gravity", "Gravity", names(TidyData))
FinalData <- TidyData %>%
group_by(subject, activity) %>%
summarise_all(funs(mean))
write.table(FinalData, "FinalData.txt", row.name=FALSE)
str(FinalData)
View(features)
View(features)
View(activities)
View(activities)
View(features)
View(features)
View(x_train)
View(x_train)
View(x_train)
View(x_train)
View(x_test)
View(x_test)
View(y_test)
View(y_test)
features.columns
features.column
features
head(features)
head(activities)
features <- read.table("UCI HAR Dataset/features.txt", col.names = c("S.No","attributes"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("activity_code", "activity"))
head(features)
head(activities)
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$attributes)
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$attributes)
X <- rbind(x_train, x_test)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "activity_code")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "activity_code")
Y <- rbind(y_train, y_test)
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
subject <- rbind(subject_train, subject_test)
Merged_Data <- cbind(subject, Y, X)
TidyData <- Merged_Data %>% select(subject, code, contains("mean"), contains("std"))
features <- read.table("UCI HAR Dataset/features.txt", col.names = c("S.No","attributes"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("activity_code", "activity"))
head(features)
head(activities)
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$attributes)
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$attributes)
X <- rbind(x_train, x_test)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "activity_code")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "activity_code")
Y <- rbind(y_train, y_test)
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
subject <- rbind(subject_train, subject_test)
Merged_Data <- cbind(subject, Y, X)
TidyData <- Merged_Data %>% select(subject, code, contains("mean"), contains("std"))
TidyData <- Merged_Data %>% select(subject, activity_code, contains("mean"), contains("std"))
TidyData$code <- activities[TidyData$code, 2]
names(TidyData)[2] = "activity"
names(TidyData)<-gsub("Acc", "Accelerometer", names(TidyData))
TidyData <- Merge_Data %>% select(subject, activity_code, contains("mean"), contains("std"))
features <- read.table("UCI HAR Dataset/features.txt", col.names = c("S.No","attributes"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("activity_code", "activity"))
head(features)
head(activities)
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$attributes)
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$attributes)
X <- rbind(x_train, x_test)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "activity_code")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "activity_code")
Y <- rbind(y_train, y_test)
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
subject <- rbind(subject_train, subject_test)
Merge_Data <- cbind(subject, Y, X)
TidyData <- Merge_Data %>% select(subject, activity_code, contains("mean"), contains("std"))
TidyData$code <- activities[TidyData$code, 2]
names(TidyData)[2] = "activity"
names(TidyData)<-gsub("Acc", "Accelerometer", names(TidyData))
names(TidyData)<-gsub("Gyro", "Gyroscope", names(TidyData))
names(TidyData)<-gsub("BodyBody", "Body", names(TidyData))
names(TidyData)<-gsub("Mag", "Magnitude", names(TidyData))
names(TidyData)<-gsub("^t", "Time", names(TidyData))
names(TidyData)<-gsub("^f", "Frequency", names(TidyData))
names(TidyData)<-gsub("tBody", "TimeBody", names(TidyData))
names(TidyData)<-gsub("-mean()", "Mean", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("-std()", "STD", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("-freq()", "Frequency", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("angle", "Angle", names(TidyData))
names(TidyData)<-gsub("gravity", "Gravity", names(TidyData))
FinalData <- TidyData %>%
group_by(subject, activity) %>%
summarise_all(funs(mean))
write.table(FinalData, "FinalData.txt", row.name=FALSE)
str(FinalData)
rm(list=ls())#clear all data from your current Global Environment
setwd("F:/Github/Cousera-EDA-project2")
Zipfile <- "Coursera_EDA_Project.zip"
# Checking if Zipfile exists already exists.
if (!file.exists(Zipfile)){
fileurl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
download.file(fileurl, Zipfile)
}
# Checking if folder is unzipped exists
if (!file.exists("Source_Classification_Code.rds") && !file.exists("summarySCC_PM25.rds")) {
unzip(Zipfile)
}
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
View(SCC)
rm(list=ls())#clear all data from your current Global Environment
setwd("F:/Github/Cousera-EDA-project2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
View(NEI)
View(SCC)
totalNEI <- aggregate(Emissions ~ year, NEI, sum)
View(totalNEI)
View(totalNEI)
barplot(totalNEI$year,totalNEI$Emissions, main="total PM2.5 emission",
xlab="Year")
barplot(totalNEI$Emissions, main="total PM2.5 emission",
xlab="Year")
barplot(totalNEI$Emissions, main="total PM2.5 emission",
names.arg = totalNEI$year)
baltimore <- subset(NEI, NEI$fips == "24510")
totalBaltimore <- aggregate(Emissions ~ year, baltimore, sum)
barplot(totalBaltimore$Emissions, main="total Baltimore emission",
names.arg = totalNEI$year)
baltimore <- subset(NEI, NEI$fips == "24510")
baltimoreType <- aggregate(Emissions ~ year + type, baltimore, sum)
View(baltimoreType)
View(baltimoreType)
ggplot(baltimoreType, aes(year, Emissions, col = type)) +
geom_line() +
geom_point() +
ggtitle(expression("Total Baltimore " ~ PM[2.5] ~ "Emissions by Type and Year")) +
ylab(expression("Total Baltimore " ~ PM[2.5] ~ "Emissions")) +
xlab("Year") +
scale_colour_discrete(name = "Type of sources") +
theme(legend.title = element_text(face = "bold"))
library(ggplot2)
ggplot(baltimoreType, aes(year, Emissions, col = type)) +
geom_line() +
geom_point() +
ggtitle(expression("Total Baltimore " ~ PM[2.5] ~ "Emissions by Type and Year")) +
ylab(expression("Total Baltimore " ~ PM[2.5] ~ "Emissions")) +
xlab("Year") +
scale_colour_discrete(name = "Type of sources") +
theme(legend.title = element_text(face = "bold"))
?grepl
View(SCC)
View(SCC)
SCCcoal <- SCC[grepl("coal", SCC$Short.Name, ignore.case = T),]
NEIcoal <- NEI[NEI$SCC %in% SCCcoal$SCC,]
totalCoal <- aggregate(Emissions ~ year + type, NEIcoal, sum)
ggplot(totalCoal, aes(year, Emissions, col = type)) +
geom_line() +
geom_point() +
ggtitle(expression("Total US" ~ PM[2.5] ~ "Coal Emission by Type and Year")) +
xlab("Year") +
ylab(expression("US " ~ PM[2.5] ~ "Coal Emission")) +
scale_colour_discrete(name = "Type of sources") +
theme(legend.title = element_text(face = "bold"))
baltimoreMotor <- subset(NEI, NEI$fips == "24510" & NEI$type == "ON-ROAD")
baltimoreMotorAGG <- aggregate(Emissions ~ year, baltimoreMotor, sum)
ggplot(baltimoreMotorAGG, aes(year, Emissions)) +
geom_line(col = "steelblue3") +
geom_point(col = "steelblue3") +
ggtitle(expression("Baltimore " ~ PM[2.5] ~ "Motor Vehicle Emissions by Year")) +
xlab("Year") +
ylab(expression(~PM[2.5]~ "Motor Vehicle Emissions"))
baltLosAngelesMotors <- subset(NEI, NEI$fips %in% c("24510","06037") & NEI$type == "ON-ROAD")
baltLosAngelesMotorsAGG <- aggregate(Emissions ~ year + fips, baltLosAngelesMotors, sum)
ggplot(baltLosAngelesMotorsAGG, aes(year, Emissions, col = fips)) +
geom_line() +
geom_point() +
ggtitle(expression("Baltimore and Los Angeles" ~ PM[2.5] ~ "Motor Vehicle Emissions by Year")) +
labs(x = "Year", y = expression(~PM[2.5]~ "Motor Vehicle Emissions") ) +
scale_colour_discrete(name = "City", labels = c("Los Angeles", "Baltimore")) +
theme(legend.title = element_text(face = "bold"))
